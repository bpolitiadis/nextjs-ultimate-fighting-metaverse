import { Heading, Text, Button, MenuItem, FormControl, Select, Image } from '@chakra-ui/react'
import { Head } from 'components/layout/Head'
import React, { useEffect, useRef, useState } from 'react'
import { Configuration, ImagesResponseDataInner, OpenAIApi } from 'openai'
import { useContractWrite, usePrepareContractWrite } from 'wagmi'
import abi from '../../../constants/abi.json'
import css from '../../styles/mint.module.css'
import { ethers } from 'ethers'
import { storeImage, storeTokeUriMetadata } from '../../utils/uploadToIPFS'
// import * as dotenv from 'dotenv'

// dotenv.config()

export default function Mint() {
  const [formData, setFormData] = useState({
    gender: 'Male',
    martialArt: 'KickBoxing',
    skin: 'Caucasian',
    hairStyle: 'Short',
    hairColor: 'Black',
    weightClass: 'Middleweight',
  })

  const [images, setImages] = useState<ImagesResponseDataInner[]>([])
  const [selectedImage, setSelectedImage] = useState('')

  const oai = useRef(
    new OpenAIApi(
      new Configuration({
        // organization: "org-QSeiWUv21jjZOahwJ8IjepUA",
        apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
      })
    )
  )

  const { config } = usePrepareContractWrite({
    address: process.env.NEXT_PUBLIC_CONTRACT_ADDRESS,
    abi: abi,
    functionName: 'mint',
    args: [
      'Judo',
      'https://oaidalleapiprodscus.blob.core.windows.net/private/org-VRpf7xj3xFII0I4O9QQxdLnz/user-29wJJuLmNEdwAEb6pby27pKy/img-py8KqrOJlUzHBwIY6KRFmwiZ.png?st=2022-12-18T13%3A17%3A09Z&se=2022-12-18T15%3A17%3A09Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2022-12-18T05%3A26%3A23Z&ske=2022-12-19T05%3A26%3A23Z&sks=b&skv=2021-08-06&sig=YZQ/ZNbRBRbRVWnApzKpRMQsV9266%2Bx7WK6m/qvgT9M%3D',
    ],
    overrides: {
      value: ethers.utils.parseEther('0.01'),
    },
  })

  const { data, isLoading, isSuccess, write } = useContractWrite(config)

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }))
  }

  const create = async () => {
    try {
      const text = `
        Character Avatar picture of fighting game.
        Character must be human.
        Image must be clean with no letters or numbers or stats or symbols on it. 
        Background must be white.
        Character fighting style is ${formData['martialArt']}. 
        External characteristics:
        Character has to be an ${formData['skin']} skinned ${formData['gender']}
        with ${formData['hairColor']} hair and a ${formData['hairStyle']} hair style.
        Character has to be in the ${formData['weightClass']} weight class division.
        Art style: Digital Anime Art
      `
      console.log(text)

      console.log(process.env.NEXT_PUBLIC_OPENAI_API_KEY)
      const { data } = await oai.current.createImage({
        prompt: text,
        n: 4,
        size: '256x256',
      })
      setImages(data.data)
      console.log(data.data)
      // write?.({
      // 	recklesslySetUnpreparedArgs: [formData['martialArt'], data.data[0].url],
      // });
    } catch (error) {
      console.error(error)
    }
  }

  const create2 = async () => {
    try {
      setImages(data.data)
    } catch (error) {
      console.error(error)
    }
  }

  const mint = async () => {
    try {
      console.log(selectedImage)

      const response = await storeImage(selectedImage)
      console.log(response.toString())
      // write?.({
      //   recklesslySetUnpreparedArgs: [formData['martialArt'], selectedImage],
      // })
    } catch (error) {
      console.error(error)
    }

    // storeImage(selectedImage)
    // write?.({ recklesslySetUnpreparedArgs: [formData['martialArt'], selectedImage] })
  }

  return (
    <>
      <Head />

      <main>
        <Heading as="h2">Mint Page</Heading>
        <Text>
          Welcome to the Ultimate Fighting Metaverse NFT mint page! It's time to create your very own digital asset representing your ultimate
          fighter. Plus, each NFT is one-of-a-kind, generated by the amazing DALL-e. Are you ready to prove your worth in the ring? Let's do this!
        </Text>
        <div className={css.root}>
          <div className={css.container}>
            <div className={css.selectionMenu}>
              <FormControl label="Gender" name="gender" value={formData['gender']} onChange={handleChange}>
                <Select placeholder="Select gender">
                  <option value="Male">Male</option>
                  <option value="Female">Female</option>
                </Select>
              </FormControl>
              <br />
              <FormControl name="martialArt" label="Martial Art" value={formData['martialArt']} onChange={handleChange}>
                <Select placeholder="Select martial art">
                  <option value="Wrestling">Wrestling</option>
                  <option value="KickBoxing">Kick-Boxing</option>
                  <option value="Judo">Judo</option>
                  <option value="JiuJitsu">Jiu Jitsu</option>
                  <option value="MuaiThai">Muai Thai</option>
                </Select>
              </FormControl>

              <br />
              <FormControl label="Skin" name="skin" value={formData['skin']} onChange={handleChange}>
                <Select placeholder="Select skin">
                  <option value="Caucasian">Caucasian</option>
                  <option value="DarkSkinned">Dark-Skinned</option>
                  <option value="Asian">Asian</option>
                </Select>
              </FormControl>
              <br />
              <FormControl label="Hair Style" name="hairStyle" value={formData['hairStyle']} onChange={handleChange}>
                <Select placeholder="Select hair style">
                  <option value="Bald">Bald</option>
                  <option value="Short">Short</option>
                  <option value="Long">Long</option>
                  <option value="Rasta">Rasta</option>
                </Select>
              </FormControl>
              <br />
              <FormControl label="Hair Color" name="hairColor" value={formData['hairColor']} onChange={handleChange}>
                <Select placeholder="Select hair color">
                  <option value="Black">Black</option>
                  <option value="Blonde">Blonde</option>
                  <option value="Brown">Brown</option>
                  <option value="Ginger">Ginger</option>
                </Select>
              </FormControl>
              <br />
              <FormControl label="Weight Class" name="weightClass" value={formData['weightClass']} onChange={handleChange}>
                <Select placeholder="Select weight class">
                  <option value="Lightweight">Lightweight</option>
                  <option value="Middleweight">Middleweight</option>
                  <option value="Heavyweight">Heavyweight</option>
                </Select>
              </FormControl>
              <br />
              <Button onClick={create} variant="contained" className={css.Button}>
                Generate
              </Button>
            </div>
            <div className={css.mintContainer}>
              <div className={css.imagesContainer}>
                {images.length > 0 &&
                  images.map((img) => (
                    <label key={img.url}>
                      <input
                        type="radio"
                        value={img.url}
                        checked={img.url === selectedImage}
                        onChange={(event) => setSelectedImage(event.target.value)}
                      />
                      <Image className={css.image} src={img.url} alt="Dall-e" />
                    </label>
                  ))}
              </div>
              <Button disabled={write} onClick={mint} variant="contained" className={css.Button}>
                Mint
              </Button>
            </div>
            <br />
          </div>

          {isLoading && <div>Check Wallet</div>}
          {isSuccess && (
            <div>
              <br />
              <Text> Your fighter is being minted </Text>
              <Text>
                {' '}
                Transaction:{' '}
                <a style={{ color: '#4ba9af' }} href={`https://mumbai.polygonscan.com/tx/${data.hash}`} target="_blank" rel="noopener noreferrer">
                  {data.hash}
                </a>
              </Text>
            </div>
          )}
        </div>
      </main>
    </>
  )
}
